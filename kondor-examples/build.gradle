plugins {
    id 'org.jetbrains.kotlin.jvm'
    id "me.champeau.jmh" version "0.7.1"
}

jmh {
    iterations = 10 // Number of measurement iterations to do.
    benchmarkMode = ['thrpt', 'avgt']
    // Benchmark mode. Available modes are: [Throughput/thrpt, AverageTime/avgt, SampleTime/sample, SingleShotTime/ss, All/all]
    batchSize = 1
    // Batch size: number of benchmark method calls per operation. (some benchmark modes can ignore this setting)
    fork = 2 // How many times to forks a single benchmark. Use 0 to disable forking altogether
//    profilers = ["async"]
//    Unable to load async-profiler. Ensure asyncProfiler library is on LD_LIBRARY_PATH (Linux), DYLD_LIBRARY_PATH (Mac OS), or -Djava.library.path. Alternatively, point to explicit library location with -prof async:libPath=<path>.
}

task runBenchmark(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'com.ubertob.kondor.json.jmh.BenchmarkKondorKt'
}

kotlin {
    jvmToolchain(8)
}

tasks.withType(GenerateModuleMetadata) {
    enabled = false
}
java {
    withJavadocJar()
    withSourcesJar()
}

test {
    useJUnitPlatform()
    maxHeapSize = "2g"
    testLogging {
//        showStandardStreams = true
        events "skipped", "failed", "passed"
    }
}

dependencies {
    implementation project(":kondor-core")
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    implementation "org.http4k:http4k-core:4.6.0.0"
    implementation project(path: ':kondor-core')
    implementation project(path: ':kondor-core')

    testImplementation project(":kondor-tools")
    testImplementation "org.junit.jupiter:junit-jupiter:$junitVersion"

    implementation("com.fasterxml.jackson.module:jackson-module-kotlin:2.13.0")
    implementation "io.strikt:strikt-core:$striktVersion"
}

